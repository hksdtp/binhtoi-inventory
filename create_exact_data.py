#!/usr/bin/env python3
"""
T·∫°o d·ªØ li·ªáu ch√≠nh x√°c t·ª´ b·∫£ng ƒë∆∞·ª£c cung c·∫•p
"""

import json

def generate_product_image(category):
    """T·∫°o SVG image d·ª±a tr√™n category"""
    if "n·∫øn" in category.lower():
        return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23F5F8FA'/%3E%3Crect x='85' y='60' width='30' height='80' fill='%23F4C2A1' stroke='%234A90A4' stroke-width='2'/%3E%3Cellipse cx='100' cy='60' rx='15' ry='8' fill='%23FFD700'/%3E%3Cpath d='M100 52 Q105 45 100 40' stroke='%23FF6B35' stroke-width='2' fill='none'/%3E%3C/svg%3E"
    elif "ƒë·ªët" in category.lower() or "tinh d·∫ßu" in category.lower():
        return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23F5F8FA'/%3E%3Cellipse cx='100' cy='160' rx='25' ry='8' fill='%23E0E0E0'/%3E%3Cpath d='M75 160 Q75 90 100 80 Q125 90 125 160' fill='%23F0F0F0' stroke='%234A90A4' stroke-width='2'/%3E%3Ccircle cx='100' cy='85' r='3' fill='%23FF6B35'/%3E%3C/svg%3E"
    elif "c·ªëc" in category.lower():
        return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23F5F8FA'/%3E%3Cpath d='M70 80 L70 140 Q70 150 80 150 L120 150 Q130 150 130 140 L130 80 Z' fill='%23F0F0F0' stroke='%234A90A4' stroke-width='2'/%3E%3Cpath d='M130 100 Q140 100 140 110 Q140 120 130 120' stroke='%234A90A4' stroke-width='2' fill='none'/%3E%3C/svg%3E"
    else:
        return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23F5F8FA'/%3E%3Crect x='40' y='40' width='120' height='120' fill='%23E0E0E0' stroke='%234A90A4' stroke-width='2'/%3E%3Ctext x='100' y='105' text-anchor='middle' fill='%23666' font-size='12'%3ES·∫£n ph·∫©m%3C/text%3E%3C/svg%3E"

# D·ªØ li·ªáu ch√≠nh x√°c t·ª´ b·∫£ng
raw_data = [
    ["25631630", "B√¨nh ƒë·ªÉ n·∫øn Amiri, h·ªìng b√≥ng nh·ªè", "B√¨nh decor Amiri, h·ªìng b√≥ng nh·ªè", 37],
    ["25631647", "B√¨nh ƒë·ªÉ n·∫øn Amiri, h·ªìng m·ªù nh·ªè", "B√¨nh decor Amiri, h·ªìng m·ªù nh·ªè", 98],
    ["25631654", "B√¨nh ƒë·ªÉ n·∫øn Amiri, xanh bi·ªÉn b√≥ng nh·ªè", "B√¨nh decor Amiri, xanh bi·ªÉn b√≥ng nh·ªè", 43],
    ["25631661", "B√¨nh ƒë·ªÉ n·∫øn Amiri, xanh m·ªù nh·ªè", "B√¨nh decor Amiri, xanh m·ªù nh·ªè", 91],
    ["25631678", "B√¨nh ƒë·ªÉ n·∫øn Amiri, Xanh l√° c√¢y b√≥ng", "B√¨nh decor Amiri, Xanh l√° c√¢y b√≥ng", 100],
    ["25631685", "B√¨nh ƒë·ªÉ n·∫øn Amiri, x√°m m·ªù nh·ªè", "B√¨nh decor Amiri, x√°m m·ªù nh·ªè", 104],
    ["25631692", "B√¨nh ƒë·ªÉ n·∫øn Amiri, ƒëen m·ªù nh·ªè", "B√¨nh decor Amiri, ƒëen m·ªù nh·ªè", 64],
    ["25631708", "B√¨nh ƒë·ªÉ n·∫øn Amiri, tr·∫Øng b√≥ng nh·ªè", "B√¨nh decor Amiri, tr·∫Øng b√≥ng nh·ªè", 95],
    ["25631715", "B√¨nh ƒë·ªÉ n·∫øn Amiri, tr·∫Øng m·ªù nh·ªè", "B√¨nh decor Amiri, tr·∫Øng m·ªù nh·ªè", 94],
    ["25631722", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng b√≥ng, S", "B√¨nh d√©cor Miri, H·ªìng b√≥ng, S", 38],
    ["25631739", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng m·ªù, S", "B√¨nh d√©cor Miri, H·ªìng m·ªù, S", 39],
    ["25631746", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh b√≥ng, S", "B√¨nh d√©cor Miri, Xanh b√≥ng, S", 47],
    ["25631753", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh m·ªù, S", "B√¨nh d√©cor Miri, Xanh m·ªù, S", 66],
    ["25631760", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh l√° b√≥ng, S", "B√¨nh d√©cor Miri, Xanh l√° b√≥ng, S", 84],
    ["25631777", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, X√°m m·ªù, S", "B√¨nh d√©cor Miri, X√°m m·ªù, S", 85],
    ["25631784", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, ƒêen m·ªù, S", "B√¨nh d√©cor Miri, ƒêen m·ªù, S", 75],
    ["25631791", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng b√≥ng, S", "B√¨nh d√©cor Miri, Tr·∫Øng b√≥ng, S", 83],
    ["25631807", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng m·ªù, S", "B√¨nh d√©cor Miri, Tr·∫Øng m·ªù, S", 90],
    ["25631814", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng b√≥ng, M", "B√¨nh d√©cor Miri, H·ªìng b√≥ng, M", 74],
    ["25631821", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng m·ªù, M", "B√¨nh d√©cor Miri, H·ªìng m·ªù, M", 98],
    ["25631838", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh b√≥ng, M", "B√¨nh d√©cor Miri, Xanh b√≥ng, M", 99],
    ["25631845", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh m·ªù, M", "B√¨nh d√©cor Miri, Xanh m·ªù, M", 97],
    ["25631852", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh l√° b√≥ng, M", "B√¨nh d√©cor Miri, Xanh l√° b√≥ng, M", 90],
    ["25631869", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, X√°m m·ªù, M", "B√¨nh d√©cor Miri, X√°m m·ªù, M", 107],
    ["25631876", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, ƒêen m·ªù, M", "B√¨nh d√©cor Miri, ƒêen m·ªù, M", 80],
    ["25631883", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng b√≥ng, M", "B√¨nh d√©cor Miri, Tr·∫Øng b√≥ng, M", 90],
    ["25631890", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng m·ªù, M", "B√¨nh d√©cor Miri, Tr·∫Øng m·ªù, M", 83],
    ["8935261208563", "C·ªëc s·ª© Deco JA657", "C·ªëc s·ª© Deco JA657", 81],
    ["8935261208570", "C·ªëc s·ª© Deco JA655", "C·ªëc s·ª© Deco JA655", 81],
    ["8935261208587", "C·ªëc s·ª© Deco JA656", "C·ªëc s·ª© Deco JA656", 78],
    ["8935261208594", "C·ªëc s·ª© Deco JA654", "C·ªëc s·ª© Deco JA654", 81],
    ["8935261208600", "C·ªëc s·ª© Deco JA028", "C·ªëc s·ª© Deco JA028", 130]
]

def get_category_from_name(name):
    """X√°c ƒë·ªãnh category d·ª±a tr√™n t√™n s·∫£n ph·∫©m"""
    name_lower = name.lower()
    
    if "b√¨nh ƒë·ªÉ n·∫øn" in name_lower or "b√¨nh decor" in name_lower:
        return "B√¨nh ƒë·ªÉ n·∫øn"
    elif "b√¨nh ƒë·ªët tinh d·∫ßu" in name_lower or "b√¨nh d√©cor miri" in name_lower:
        return "B√¨nh x√¥ng ƒë·ªët tinh d·∫ßu"
    elif "c·ªëc" in name_lower:
        return "C·ªëc n·∫øn th∆°m"
    else:
        return "Kh√°c"

# T·∫°o d·ªØ li·ªáu products
products = []
for i, (sku, original_name, display_name, stock) in enumerate(raw_data, 1):
    category = get_category_from_name(display_name)
    image = generate_product_image(category)
    
    product = {
        'id': i,
        'name': display_name,
        'category': category,
        'stock': stock,
        'price': 0,  # Kh√¥ng c√≥ gi√° trong d·ªØ li·ªáu g·ªëc
        'description': f'M√£: {sku}',
        'image': image,
        'sku': sku
    }
    
    products.append(product)

# Xu·∫•t ra file JSON
with open('products_data.json', 'w', encoding='utf-8') as f:
    json.dump(products, f, ensure_ascii=False, indent=2)

print(f'‚úÖ ƒê√£ t·∫°o {len(products)} s·∫£n ph·∫©m ch√≠nh x√°c t·ª´ b·∫£ng d·ªØ li·ªáu')

# Th·ªëng k√™
total_stock = sum(p['stock'] for p in products)
categories = {}
for p in products:
    cat = p['category']
    if cat not in categories:
        categories[cat] = {'count': 0, 'stock': 0}
    categories[cat]['count'] += 1
    categories[cat]['stock'] += p['stock']

print(f'\nüìä Th·ªëng k√™:')
print(f'- T·ªïng s·ªë s·∫£n ph·∫©m: {len(products)}')
print(f'- T·ªïng t·ªìn kho: {total_stock}')
print(f'- Theo danh m·ª•c:')
for cat, stats in sorted(categories.items(), key=lambda x: x[1]['stock'], reverse=True):
    print(f'  + {cat}: {stats["count"]} s·∫£n ph·∫©m, {stats["stock"]} t·ªìn')

# Ki·ªÉm tra t·ªïng
expected_total = 2602
if total_stock == expected_total:
    print(f'‚úÖ T·ªïng t·ªìn kho kh·ªõp: {total_stock}')
else:
    print(f'‚ùå T·ªïng t·ªìn kho kh√¥ng kh·ªõp: {total_stock} (mong ƒë·ª£i: {expected_total})')
