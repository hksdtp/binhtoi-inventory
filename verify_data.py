#!/usr/bin/env python3
"""
Ki·ªÉm tra d·ªØ li·ªáu ch√≠nh x√°c v·ªõi b·∫£ng g·ªëc
"""

import json

# D·ªØ li·ªáu g·ªëc t·ª´ b·∫£ng
original_data = [
    ["25631630", "B√¨nh ƒë·ªÉ n·∫øn Amiri, h·ªìng b√≥ng nh·ªè", "B√¨nh decor Amiri, h·ªìng b√≥ng nh·ªè", 37],
    ["25631647", "B√¨nh ƒë·ªÉ n·∫øn Amiri, h·ªìng m·ªù nh·ªè", "B√¨nh decor Amiri, h·ªìng m·ªù nh·ªè", 98],
    ["25631654", "B√¨nh ƒë·ªÉ n·∫øn Amiri, xanh bi·ªÉn b√≥ng nh·ªè", "B√¨nh decor Amiri, xanh bi·ªÉn b√≥ng nh·ªè", 43],
    ["25631661", "B√¨nh ƒë·ªÉ n·∫øn Amiri, xanh m·ªù nh·ªè", "B√¨nh decor Amiri, xanh m·ªù nh·ªè", 91],
    ["25631678", "B√¨nh ƒë·ªÉ n·∫øn Amiri, Xanh l√° c√¢y b√≥ng", "B√¨nh decor Amiri, Xanh l√° c√¢y b√≥ng", 100],
    ["25631685", "B√¨nh ƒë·ªÉ n·∫øn Amiri, x√°m m·ªù nh·ªè", "B√¨nh decor Amiri, x√°m m·ªù nh·ªè", 104],
    ["25631692", "B√¨nh ƒë·ªÉ n·∫øn Amiri, ƒëen m·ªù nh·ªè", "B√¨nh decor Amiri, ƒëen m·ªù nh·ªè", 64],
    ["25631708", "B√¨nh ƒë·ªÉ n·∫øn Amiri, tr·∫Øng b√≥ng nh·ªè", "B√¨nh decor Amiri, tr·∫Øng b√≥ng nh·ªè", 95],
    ["25631715", "B√¨nh ƒë·ªÉ n·∫øn Amiri, tr·∫Øng m·ªù nh·ªè", "B√¨nh decor Amiri, tr·∫Øng m·ªù nh·ªè", 94],
    ["25631722", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng b√≥ng, S", "B√¨nh d√©cor Miri, H·ªìng b√≥ng, S", 38],
    ["25631739", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng m·ªù, S", "B√¨nh d√©cor Miri, H·ªìng m·ªù, S", 39],
    ["25631746", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh b√≥ng, S", "B√¨nh d√©cor Miri, Xanh b√≥ng, S", 47],
    ["25631753", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh m·ªù, S", "B√¨nh d√©cor Miri, Xanh m·ªù, S", 66],
    ["25631760", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh l√° b√≥ng, S", "B√¨nh d√©cor Miri, Xanh l√° b√≥ng, S", 84],
    ["25631777", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, X√°m m·ªù, S", "B√¨nh d√©cor Miri, X√°m m·ªù, S", 85],
    ["25631784", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, ƒêen m·ªù, S", "B√¨nh d√©cor Miri, ƒêen m·ªù, S", 75],
    ["25631791", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng b√≥ng, S", "B√¨nh d√©cor Miri, Tr·∫Øng b√≥ng, S", 83],
    ["25631807", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng m·ªù, S", "B√¨nh d√©cor Miri, Tr·∫Øng m·ªù, S", 90],
    ["25631814", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng b√≥ng, M", "B√¨nh d√©cor Miri, H·ªìng b√≥ng, M", 74],
    ["25631821", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, H·ªìng m·ªù, M", "B√¨nh d√©cor Miri, H·ªìng m·ªù, M", 98],
    ["25631838", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh b√≥ng, M", "B√¨nh d√©cor Miri, Xanh b√≥ng, M", 99],
    ["25631845", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh m·ªù, M", "B√¨nh d√©cor Miri, Xanh m·ªù, M", 97],
    ["25631852", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Xanh l√° b√≥ng, M", "B√¨nh d√©cor Miri, Xanh l√° b√≥ng, M", 90],
    ["25631869", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, X√°m m·ªù, M", "B√¨nh d√©cor Miri, X√°m m·ªù, M", 107],
    ["25631876", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, ƒêen m·ªù, M", "B√¨nh d√©cor Miri, ƒêen m·ªù, M", 80],
    ["25631883", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng b√≥ng, M", "B√¨nh d√©cor Miri, Tr·∫Øng b√≥ng, M", 90],
    ["25631890", "B√¨nh ƒë·ªët tinh d·∫ßu Amiri, Tr·∫Øng m·ªù, M", "B√¨nh d√©cor Miri, Tr·∫Øng m·ªù, M", 83],
    ["8935261208563", "C·ªëc s·ª© Deco JA657", "C·ªëc s·ª© Deco JA657", 81],
    ["8935261208570", "C·ªëc s·ª© Deco JA655", "C·ªëc s·ª© Deco JA655", 81],
    ["8935261208587", "C·ªëc s·ª© Deco JA656", "C·ªëc s·ª© Deco JA656", 78],
    ["8935261208594", "C·ªëc s·ª© Deco JA654", "C·ªëc s·ª© Deco JA654", 81],
    ["8935261208600", "C·ªëc s·ª© Deco JA028", "C·ªëc s·ª© Deco JA028", 130]
]

# ƒê·ªçc d·ªØ li·ªáu t·ª´ JSON
with open('products_data.json', 'r', encoding='utf-8') as f:
    products = json.load(f)

print("üîç KI·ªÇM TRA D·ªÆ LI·ªÜU CH√çNH X√ÅC")
print("=" * 50)

errors = []
total_stock_original = sum(row[3] for row in original_data)
total_stock_json = sum(p['stock'] for p in products)

print(f"üìä T·ªïng s·ªë s·∫£n ph·∫©m:")
print(f"   G·ªëc: {len(original_data)}")
print(f"   JSON: {len(products)}")
print(f"   Kh·ªõp: {'‚úÖ' if len(original_data) == len(products) else '‚ùå'}")
print()

print(f"üìä T·ªïng t·ªìn kho:")
print(f"   G·ªëc: {total_stock_original}")
print(f"   JSON: {total_stock_json}")
print(f"   Kh·ªõp: {'‚úÖ' if total_stock_original == total_stock_json else '‚ùå'}")
print()

print("üîç Ki·ªÉm tra t·ª´ng s·∫£n ph·∫©m:")
print("-" * 50)

for i, (sku, original_name, display_name, stock) in enumerate(original_data):
    # T√¨m s·∫£n ph·∫©m trong JSON
    product = next((p for p in products if p['sku'] == sku), None)
    
    if not product:
        errors.append(f"‚ùå Kh√¥ng t√¨m th·∫•y SKU {sku}")
        continue
    
    # Ki·ªÉm tra c√°c tr∆∞·ªùng
    name_ok = product['name'] == display_name
    stock_ok = product['stock'] == stock
    price_ok = product['price'] == 0
    
    if name_ok and stock_ok and price_ok:
        print(f"‚úÖ {sku}: {display_name} (T·ªìn: {stock})")
    else:
        print(f"‚ùå {sku}:")
        if not name_ok:
            print(f"   T√™n sai: '{product['name']}' != '{display_name}'")
        if not stock_ok:
            print(f"   T·ªìn sai: {product['stock']} != {stock}")
        if not price_ok:
            print(f"   Gi√° sai: {product['price']} != 0")
        errors.append(f"SKU {sku} c√≥ l·ªói")

print()
print("=" * 50)
if errors:
    print(f"‚ùå C√≥ {len(errors)} l·ªói:")
    for error in errors:
        print(f"   {error}")
else:
    print("‚úÖ T·∫§T C·∫¢ D·ªÆ LI·ªÜU CH√çNH X√ÅC 100%!")
    print("‚úÖ S·∫µn s√†ng s·ª≠ d·ª•ng app!")

print()
print("üì± App: http://localhost:8000/index.html")
