#!/usr/bin/env python3
"""
Script ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi Supabase
"""
import json
import os
from datetime import datetime
from supabase_config import get_supabase_client

def load_local_data():
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON local"""
    try:
        with open('products_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file products_data.json")
        return []
    except json.JSONDecodeError:
        print("‚ùå L·ªói ƒë·ªçc file JSON")
        return []

def sync_to_supabase(products_data):
    """ƒê·ªìng b·ªô d·ªØ li·ªáu l√™n Supabase"""
    try:
        supabase = get_supabase_client()
        
        # X√≥a d·ªØ li·ªáu c≈© (t√πy ch·ªçn)
        # supabase.table('products').delete().execute()
        
        success_count = 0
        error_count = 0
        
        for product in products_data:
            try:
                # Chu·∫©n b·ªã d·ªØ li·ªáu (lo·∫°i b·ªè id ƒë·ªÉ Supabase t·ª± t·∫°o)
                product_data = {
                    'name': product.get('name', ''),
                    'category': product.get('category', ''),
                    'stock': product.get('stock', 0),
                    'price': product.get('price', 0),
                    'description': product.get('description', ''),
                    'image': product.get('image', ''),
                    'sku': product.get('sku', '')
                }
                
                # Upsert d·ªØ li·ªáu (insert ho·∫∑c update n·∫øu sku ƒë√£ t·ªìn t·∫°i)
                result = supabase.table('products').upsert(
                    product_data, 
                    on_conflict='sku'
                ).execute()
                
                if result.data:
                    success_count += 1
                    print(f"‚úÖ Sync th√†nh c√¥ng: {product.get('name', 'N/A')}")
                else:
                    error_count += 1
                    print(f"‚ùå L·ªói sync: {product.get('name', 'N/A')}")
                    
            except Exception as e:
                error_count += 1
                print(f"‚ùå L·ªói sync {product.get('name', 'N/A')}: {str(e)}")
        
        print(f"\nüìä K·∫øt qu·∫£ sync:")
        print(f"   ‚úÖ Th√†nh c√¥ng: {success_count}")
        print(f"   ‚ùå L·ªói: {error_count}")
        print(f"   üì¶ T·ªïng: {len(products_data)}")
        
        return success_count, error_count
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi Supabase: {str(e)}")
        return 0, len(products_data)

def sync_from_supabase():
    """L·∫•y d·ªØ li·ªáu t·ª´ Supabase v√† l∆∞u local"""
    try:
        supabase = get_supabase_client()
        
        # L·∫•y t·∫•t c·∫£ products
        result = supabase.table('products').select('*').execute()
        
        if result.data:
            # L∆∞u v√†o file JSON
            with open('products_data_supabase.json', 'w', encoding='utf-8') as f:
                json.dump(result.data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ ƒê√£ t·∫£i {len(result.data)} s·∫£n ph·∫©m t·ª´ Supabase")
            return result.data
        else:
            print("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu trong Supabase")
            return []
            
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu t·ª´ Supabase: {str(e)}")
        return []

def main():
    print("üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi Supabase...")
    print("=" * 50)
    
    # Ki·ªÉm tra file .env
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  Ch∆∞a c√≥ file .env. T·∫°o file .env t·ª´ .env.example v√† c·∫≠p nh·∫≠t th√¥ng tin Supabase")
        return
    
    # Menu ch·ªçn
    print("Ch·ªçn h√†nh ƒë·ªông:")
    print("1. Sync d·ªØ li·ªáu local l√™n Supabase")
    print("2. T·∫£i d·ªØ li·ªáu t·ª´ Supabase v·ªÅ local")
    print("3. C·∫£ hai (sync l√™n r·ªìi t·∫£i v·ªÅ)")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
    
    if choice == "1":
        products = load_local_data()
        if products:
            sync_to_supabase(products)
    
    elif choice == "2":
        sync_from_supabase()
    
    elif choice == "3":
        products = load_local_data()
        if products:
            success, errors = sync_to_supabase(products)
            if success > 0:
                print("\n" + "=" * 50)
                sync_from_supabase()
    
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

if __name__ == "__main__":
    main()